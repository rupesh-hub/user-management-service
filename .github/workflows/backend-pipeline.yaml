name: backend pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'deployment/backend-deployment.yaml'
      - 'README.md'

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile project
        run: |
          cd backend
          ./mvnw clean compile

  tests:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running unit tests
        run: |
          cd backend
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    needs: [ compile, tests ]
    name: Build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build project
        run: |
          cd backend
          ./mvnw clean package

  build-image:
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{github.repository}}
    outputs:
      image_tag: ${{ steps.metadata.outputs.tags }}
    name: Build docker image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract project version
        id: extract_version
        working-directory: ./backend
        run: |
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata for docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest
            type=raw,value=${{ steps.extract_version.outputs.VERSION }}

      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: docker/backend/Dockerfile
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  update-deployment:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [ build-image ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Git Config
        run: |
          git config user.name 'GitHub Actions'
          git config user.email "actions@github.com"

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq

      - name: Update container image
        env:
          NEW_IMAGE: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          CONTAINER_NAME: user-management-service  # Make sure this matches your container name
        run: |
          # Create backup
          cp deployment/backend-deployment.yaml deployment/backend-deployment.yaml.bak

          # Update the image using yq (fixed command)
          yq eval -i "
            .spec.template.spec.containers[] |= 
            (select(.name == \"$CONTAINER_NAME\").image = \"$NEW_IMAGE\"
          " deployment/backend-deployment.yaml

          # Verify the change
          echo "Updated image to: $NEW_IMAGE"
          yq eval '.spec.template.spec.containers[].image' deployment/backend-deployment.yaml

      - name: Commit and push changes
        run: |
          if git diff --quiet --exit-code -- deployment/backend-deployment.yaml; then
            echo "No changes to commit"
            exit 0
          fi

          git add deployment/backend-deployment.yaml
          git commit -m "CI: Update $CONTAINER_NAME image [skip ci]"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}