name: backend pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'deployment/**'
      - 'README.md'
      - '.github/workflows/frontend-*.yaml'
      - 'docker/frontend'
      - 'frontend'

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile project
        run: |
          cd backend
          ./mvnw clean compile

  tests:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running unit tests
        run: |
          cd backend
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    needs: [ compile, tests ]
    name: Build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java environment
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build project
        run: |
          cd backend
          ./mvnw clean package

  build-image:
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{github.repository}}
    outputs:
      image_tag: ${{ steps.metadata.outputs.tags }}
    name: Build docker image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract project version
        id: extract_version
        working-directory: ./backend
        run: |
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata for docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest
            type=raw,value=${{ steps.extract_version.outputs.VERSION }}

      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: docker/backend/Dockerfile
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  update-deployment:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [ build-image ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"

          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" deployment/backend-deployment.yaml

          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" deployment/backend-deployment.yaml

      - name: Commit and push changes
        run: |
          # Stash any local changes (if any)
          git stash --include-untracked

          # Fetch remote changes and rebase the local branch to avoid conflicts
          git pull origin main --rebase

          # Apply stashed changes if any
          git stash pop || echo "No stashed changes to apply"

          # Add frontend deployment file changes (for frontend part)
          git add deployment/frontend-deployment.yaml

          # Commit only if there are changes
          git diff --cached --quiet || git commit -m "Update frontend image to ${IMAGE_TAG} [skip ci]"

          # Push changes to the remote repository
          git push origin main
      
